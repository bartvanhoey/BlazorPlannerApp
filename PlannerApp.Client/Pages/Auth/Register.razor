@page "/auth/register"
@layout AuthLayout
@using PlannerApp.Shared.Models
@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div class="row">
  <div class="col-12">
    <h2>
      Create a new Account
    </h2>
    <EditForm Model="request" OnValidSubmit="RegisterUser">
     <RadzenCard>
        <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>


        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <label for="firstName">First Name</label>
        <RadzenTextBox @bind-Value="request.FirstName"></RadzenTextBox>

        <label for="lastName">Last Name</label>
        <RadzenTextBox @bind-Value="request.LastName"></RadzenTextBox>

        <label for="emailAddress">Email</label>
        <RadzenTextBox @bind-Value="request.Email"></RadzenTextBox>

        <label for="password">Password</label>
        <RadzenPassword @bind-Value="request.Password"></RadzenPassword>

        <label for="confirmPassword">Confirm Password</label>
        <RadzenPassword @bind-Value="request.ConfirmPassword"></RadzenPassword>

        <hr>

        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Register" Disabled="isBusy"
            ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"></RadzenButton>

        <RadzenButton ButtonType="Radzen.ButtonType.Button" Text="Login" Disabled="isBusy"
            ButtonStyle="Radzen.ButtonStyle.Secondary" class="btn-block mr-2" Click="GotoLogin" ></RadzenButton>
     </RadzenCard>

    </EditForm>
  </div>
</div>

@code{
  RegisterRequest request = new RegisterRequest();
  bool isBusy = false;
  string message = string.Empty;
  AlertMessageType messageType = AlertMessageType.Success;

  public async Task RegisterUser()
  {
    isBusy = true;
    var response = await AuthenticationService.RegisterUserAsync(request);
    if (response.IsSuccess)
    {
      message = response.Message;
      messageType = AlertMessageType.Success;
    }
    else
    {
      message = response.Errors.FirstOrDefault() ?? response.Message;
      messageType = AlertMessageType.Error;
    }
    isBusy = false;
  }

   void GotoLogin(){
    NavigationManager.NavigateTo("/auth/login");
  }

}
@page "/plans/add"
@attribute [Authorize]
@using System.IO

@inject PlansService PlansService
@inject NavigationManager NavigationManager
@inject IFileReaderService FileReaderService

<h3>Add a new Plan</h3>

<div class="row">
  <div class="col-6">
   <EditForm Model="planRequest" OnValidSubmit="async () => await PostPlanAsync()">
      <RadzenCard>
        <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary />
        <RadzenTextBox @bind-Value="planRequest.Title" Placeholder="Title" Style="margin:10px;"></RadzenTextBox>
        <RadzenTextArea @bind-Value="planRequest.Description" Placeholder="Description"  Style="margin:10px;"></RadzenTextArea>
        <input type="file" style="margin:10px;" @ref="inputReference" @onchange="async () => await ChooseFileAsync()"/>
        <img style="width: 100%;margin:10px;" src="@imageContent" >
        <hr>
        <RadzenButton Disabled="isBusy" ButtonType="Radzen.ButtonType.Submit" Text="Insert" class="btn btn-block" ButtonStyle="Radzen.ButtonStyle.Success" Style="margin:5px"></RadzenButton>
      </RadzenCard>
   </EditForm>
  </div>
</div>

@code {
  PlanRequest planRequest = new PlanRequest();
  Stream fileStream = null;
  string imageContent = string.Empty;
  string fileName = string.Empty;
  bool isBusy = false;

  string message = string.Empty;
  AlertMessageType messageType = AlertMessageType.Success;

  ElementReference inputReference;

  [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

  async Task ChooseFileAsync()
  {
    var file = (await FileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

    var fileInfo = await file.ReadFileInfoAsync();
    var extension = Path.GetExtension(fileInfo.Name).ToLowerInvariant();
    var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

    if (!allowedExtensions.Contains(extension))
    {
      message = "The choosen file is not a valid image file";
      messageType = AlertMessageType.Error;
      return;
    }
    else
    {
      message = null;
      using (var memoryStream = await file.CreateMemoryStreamAsync())
      {
        fileStream = new MemoryStream(memoryStream.ToArray());
        fileName = fileInfo.Name;
        imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
      }
    }
  }

  async Task PostPlanAsync()
  {
    isBusy = true;

    var userState = AuthenticationState.Result;
    PlansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

    planRequest.CoverFile = fileStream;
    planRequest.FileName = fileName;

    var response = await PlansService.PostPlanAsync(planRequest);
    if (response.IsSuccess)
    {
      NavigationManager.NavigateTo("/Plans");
    }
    else
    {
      message = response.Message;
      messageType = AlertMessageType.Error;
    }
    isBusy = false;

  }
}
@page "/plans" 
@page "/plans/{pageNumber:int}" 
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject PlansService PlansService

@if (string.IsNullOrWhiteSpace(Query)) 
{
  <h2>My Plans - Page: @PageNumber</h2>
}
else 
{
  <h2>My Plans - Results for: @Query - Page: @PageNumber</h2>
} 

@if (isBusy)
{ 
   <h2>Loading plans...</h2>
}
else
{
  <div class="row">
    <RadzenTextBox Placeholder="Search Query" @bind-Value="Query"/> <RadzenButton Text="Search" Click="async () => await GetPlansAsync()" />
  </div>
  <hr>
  <div class="row">
    @foreach (var plan in plans)
    {
        <div class="col-4">
          <RadzenCard Style="margin:10px;">
            <img src="@plan.CoverPath" style="width: 90%;margin:5px;">
            <h2>@plan.Title</h2>
            <p>@plan.Description</p>
            <hr>
            <div class="row">
              <div class="col-6">
                <RadzenButton  ButtonStyle="Radzen.ButtonStyle.Success" Text="Edit" class="btn-block" 
                  Click='() => NavigationManager.NavigateTo($"/plans/details/{plan.Id}", true)'/>
              </div>
              <div class="col-6">
                <RadzenButton isb ButtonStyle="Radzen.ButtonStyle.Danger" Click="()=> SelectPlan(plan.Id)" Text="Delete" class="btn-block" />
              </div>
            </div>
            @if (selectedPlanId == plan.Id) {
              <div class="row">
                <div class="col-12">
                  <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Confirm" Click="async ()=> await DeletePlanAsync()" class="btn-block" />
                </div>
              </div>  
            }
            
          </RadzenCard>
      </div>
    }
  </div>
  <hr>
  <div class="row">
     @for (int i = 1; i < totalPages; i++)
     {
        int page =i;
        @if (page == PageNumber ) {
          <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Disabled="true" Style="margin: 8px;" />
        }
        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await MoveToPageAsync(page)" Style="margin: 8px;" />
     }
     
  </div>
}

@code {
  [Parameter] public int? PageNumber { get; set; }
  [Parameter] public string Query { get; set; }
  [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
  bool isBusy = false;
  string selectedPlanId = string.Empty;
  List<Plan> plans = new List<Plan>();
  int totalPages = 1;

  protected override async Task OnInitializedAsync()
  {
    await GetPlansAsync();
  }

  void SelectPlan(string id)
  {
    selectedPlanId = id;
  }

  public async Task GetPlansAsync()
  {
    isBusy = true;

    var userState = AuthenticationState.Result;
    PlansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

    if (PageNumber == null) PageNumber = 1;

    PlansCollectionPagingResponse response = null;

    if (string.IsNullOrWhiteSpace(Query))
      response = await PlansService.GetAllPlansByPage(PageNumber.Value);
    else
      response = await PlansService.SearchPlansByPage(Query, PageNumber.Value);

    if (response.Count % response.PageSize == 0)
      totalPages = response.Count / response.PageSize;
    else
      totalPages = (response.Count / response.PageSize) + 1;

    plans = response.Records.ToList();

    isBusy = false;
  }

  async Task MoveToPageAsync(int pageNumber)
  {
    PageNumber = pageNumber;
    await GetPlansAsync();
  }

  async Task DeletePlanAsync()
  {
    isBusy = true;
    var response = await PlansService.DeletePlanAsync(selectedPlanId);
    if (response.IsSuccess)
    {
      plans.Remove(plans.FirstOrDefault(x => x.Id == selectedPlanId));
    }
    else
    {
      await GetPlansAsync();
    }
    isBusy = false;
  }



}
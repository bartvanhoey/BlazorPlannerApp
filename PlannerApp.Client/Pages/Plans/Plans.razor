@page "/plans" 
@page "/plans/{pageNumber:int}" 
@attribute [Authorize]

@inject PlansService PlansService

<h1>My Plans</h1>
@if (isBusy) {
  <h2>Loading plans...</h2>
}
else
{
  <div class="row">
    <RadzenTextBox Placeholder="Search Query"></RadzenTextBox>
  </div>
  <hr>
  <div class="row">
    @foreach (var plan in plans)
    {
        <div class="col-4">
          <RadzenCard>
            <img src="@plan.CoverPath" style="height: 100px;margin:5px;">
            <h2>@plan.Title</h2>
            <p>@plan.Description</p>
            <div class="row">
              <div class="col-6">
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Edit" class="btn-block" />
              </div>
                  <div class="col-6">
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" class="btn-block" />
              </div>
            </div>
          </RadzenCard>
      </div>
    }


    
  </div>
  <hr>
  <div class="row">
      <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="1" Style="margin: 8px;" />
  </div>
}

@code {
  [Parameter] public int? PageNumber { get; set; }

  [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

  bool isBusy = false;
  List<Plan> plans = new List<Plan>();

   protected override async Task OnInitializedAsync(){
     await GetPlansAsync();
   }



  public async Task GetPlansAsync(){
    isBusy = true;

    var userState = AuthenticationState.Result;
    PlansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

    if (PageNumber == null) PageNumber = 1;
    
    var response = await PlansService.GetAllPlansByPage(PageNumber.Value);

    plans = response.Records.ToList();

    isBusy = false;
  }




}
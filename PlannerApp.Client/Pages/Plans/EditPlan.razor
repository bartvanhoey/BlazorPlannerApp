@page "/plans/details/{id}"
@attribute [Authorize]
@using System.IO

@inject PlansService PlansService
@inject NavigationManager NavigationManager
@inject IFileReaderService FileReaderService
@inject TodoItemsService TodoItemsService

<h3>Plan @planRequest.Title</h3>

<div class="row">
  <div class="col-6">
   <EditForm Model="planRequest" OnValidSubmit="async () => await EditPlanAsync()">
      <RadzenCard>
        <AlertMessage Message="@message" MessageType="@messageType"></AlertMessage>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary />
        <RadzenTextBox @bind-Value="planRequest.Title" Placeholder="Title" Style="margin:10px;"></RadzenTextBox>
        <RadzenTextArea @bind-Value="planRequest.Description" Placeholder="Description"  Style="margin:10px;"></RadzenTextArea>
        <input type="file" style="margin:10px;" @ref="inputReference" @onchange="async () => await ChooseFileAsync()"/>
        <img style="width: 100%;margin:10px;" src="@imageContent" >
        <hr>
        <RadzenButton Disabled="isBusy" ButtonType="Radzen.ButtonType.Submit" Text="Edit" class="btn btn-block" ButtonStyle="Radzen.ButtonStyle.Success" Style="margin:5px"></RadzenButton>
      </RadzenCard>
   </EditForm>
  </div>
  <div class="col-6">
    <RadzenCard>
      <h2>Plan's TodoItems</h2>
      <EditForm Model="todoItemRequest" OnValidSubmit="async ()=> await SubmitTodoItemFormAsync()">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
          <table>
            <tr>
              <td>
                <RadzenButton Text="*" Disabled="isBusy" Click="ClearSelection" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Button"></RadzenButton>
              </td>
              <td>
                <RadzenTextBox Placeholder="Todo item description..." @bind-Value="todoItemRequest.Description" />
              </td>
              <td>
                <RadzenButton Text="Submit" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Submit"></RadzenButton>
              </td>
            </tr>
            @foreach (var todoItem in todoItems)
            { 
                string descriptionStyle = todoItem.IsDone? "text-decoration-line: line-through;" : "text-decoration-line: none;";
                string rowStyle = selectedTodoItem == todoItem ? "cursor:pointer;background:lightblue" :"cursor:pointer;background:white";
                <tr style="@rowStyle" @onclick="() => selectTodoItem(todoItem)">
                  <td>
                    <RadzenCheckBox @bind-Value="todoItem.IsDone" @onclick="async ()=> await ChangeTodoItemStatusAsync(todoItem.Id)" />
                  </td>
                  <td><span style="@descriptionStyle">@todoItem.Description</span></td>
                  <td>                
                    <RadzenButton Click="async () => await RemoveTodoItemAsync(todoItem.Id)" Text="x" ButtonStyle="Radzen.ButtonStyle.Danger" Disabled="isBusy" ButtonType="Radzen.ButtonType.Button"></RadzenButton>
                  </td>
                </tr>
            }
          </table>
      </EditForm>
     </RadzenCard>
  </div>
  </div>

@code {
  PlanRequest planRequest = new PlanRequest();
  TodoItemRequest todoItemRequest = new TodoItemRequest();
  Stream fileStream = null;
  string imageContent = string.Empty;
  string fileName = string.Empty;
  bool isBusy = false;
  string message = string.Empty;
  AlertMessageType messageType = AlertMessageType.Success;
  ElementReference inputReference;
  [Parameter] public string Id { get; set; }
  [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
  List<TodoItem> todoItems = new List<TodoItem>();
  TodoItem selectedTodoItem = null;

  async Task InsertTodoItemAsync()
  {
    isBusy = true;
    todoItemRequest.PlanId = Id;
    var response = await TodoItemsService.PostTodoItemAsync(todoItemRequest);
    if (response.IsSuccess)
    {
      todoItems.Add(response.Record);
    }
    else
    {

    }
    isBusy = false;
  }

  async Task SubmitTodoItemFormAsync()
  {
    if (selectedTodoItem == null)
    {
      await InsertTodoItemAsync();
    }
    else
    {
      await EditTodoItemAsync();
    }
  }

  async Task EditTodoItemAsync()
  {
    isBusy = true;
    todoItemRequest.PlanId = Id;
    var response = await TodoItemsService.EditTodoItemAsync(todoItemRequest);
    if (response.IsSuccess)
    {
      var editedTodoItem = todoItems.SingleOrDefault(x => x.Id == response.Record.Id);
      editedTodoItem.Description = response.Record.Description;
    }
    else
    {

    }
    isBusy = false;
  }

  async Task GetPlanById()
  {
    isBusy = true;
    var response = await PlansService.GetPlanByIdAsync(Id);
    if (response.IsSuccess)
    {
      planRequest.Title = response.Record.Title;
      planRequest.Description = response.Record.Description;
      imageContent = response.Record.CoverPath;
      planRequest.Id = response.Record.Id;
      todoItems = response.Record.TodoItems.ToList();
    }
    else
    {
      message = response.Message;
      messageType = Models.AlertMessageType.Error;
    }
    isBusy = false;
  }

  protected override async Task OnInitializedAsync()
  {
    var userState = AuthenticationState.Result;
    PlansService.AccessToken = TodoItemsService.AccessToken = userState.User.FindFirst("AccessToken").Value;
    await GetPlanById();
  }

  async Task ChooseFileAsync()
  {
    var file = (await FileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

    var fileInfo = await file.ReadFileInfoAsync();
    var extension = Path.GetExtension(fileInfo.Name).ToLowerInvariant();
    var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

    if (!allowedExtensions.Contains(extension))
    {
      message = "The choosen file is not a valid image file";
      messageType = AlertMessageType.Error;
      return;
    }
    else
    {
      message = null;
      using (var memoryStream = await file.CreateMemoryStreamAsync())
      {
        fileStream = new MemoryStream(memoryStream.ToArray());
        fileName = fileInfo.Name;
        imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
      }
    }
  }

  async Task EditPlanAsync()
  {
    isBusy = true;

    var userState = AuthenticationState.Result;
    PlansService.AccessToken = userState.User.FindFirst("AccessToken").Value;

    planRequest.CoverFile = fileStream;
    planRequest.FileName = fileName;

    var response = await PlansService.EditPlanAsync(planRequest);
    if (response.IsSuccess)
    {
      message = "Plan edited successfully";
      messageType = AlertMessageType.Success;

    }
    else
    {
      message = response.Message;
      messageType = AlertMessageType.Error;
    }
    isBusy = false;
  }

  async Task ChangeTodoItemStatusAsync(string todoItemId)
  {
    isBusy = true;
    var response = await TodoItemsService.ChangeTodoItemStatusAsync(todoItemId);
    if (!response.IsSuccess)
    {
      // TODO
    }
    isBusy = false;
  }

  void selectTodoItem(TodoItem todoItem)
  {
    selectedTodoItem = todoItem;
    todoItemRequest.Id = todoItem.Id;
    todoItemRequest.Description = todoItem.Description;
  }


  void ClearSelection()
  {
    selectedTodoItem = null;
    todoItemRequest = null;
  }

  async Task RemoveTodoItemAsync(string id) { 
    isBusy = true;

    var response = await TodoItemsService.DeleteTodoItemStatusAsync(id);

    isBusy =false;
  }

}
